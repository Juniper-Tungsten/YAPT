{{ heading }}
system {
    host-name {{ device.hostname }};
    time-zone {{ device.timezone }};
    domain-name {{ device.domain_name }};
    root-authentication {
        encrypted-password "{{ device.encrypted_password }}"; ## SECRET-DATA
    }
    services {
        ssh {
            protocol-version v2;
        }
        netconf {
            ssh;
        }
        outbound-ssh {
            client yapt {
                device-id abc123;
                secret "$9$Uaiqf36A1RSTzRSreXxDik.Tzn/CuBI"; ## SECRET-DATA
                services netconf;
                100.123.34.3 port 7804;
            }
        }
    }
    syslog {
        user * {
            any emergency;
        }
        file messages {
            any any;
            authorization info;
        }
        file interactive-commands {
            interactive-commands any;
        }
    }
    license {
        autoupdate {
            url https://ae1.juniper.net/junos/key_retrieval;
        }
    }
    ntp {
        server {{ device.ntp_server }};
    }
    scripts {
        op {
            file cleanup.slax
        }
    }
}
interfaces {
    {% for interface in device.interfaces %}
    {% if interface.address == "dhcp" %}
    {{ interface.name }} {
        description "{{ interface.description }}";
        unit 0 {
            family {{ interface.family }} {
                dhcp-client;
            }
        }
    }
    {% else %}
    {{ interface.name }} {
        description "{{ interface.description }}";
        unit {{ interface.unit }} {
            family {{ interface.family }} {
                address {{ interface.address }}/{{ interface.mask }};
            }
        }
    }
    {% endif %}
    {% endfor %}
}
snmp {
    community {{ device.community }} {
        authorization read-only;
    }
}
routing-options {
    router-id {{ device.router_id }};
}
protocols {
    ospf {
        area 0.0.0.0 {
            {% for interface in device.interfaces %}
            {% if interface.zone.startswith('transit') %}
            interface {{ interface.name }}.{{ interface.unit }};
            {% elif interface.name.startswith('st0') %}
            interface {{ interface.name }}.{{ interface.unit }} {
                interface-type p2p;
            }
            {% else %}
            interface {{ interface.name }}.{{ interface.unit }}{
                passive;
            }
            {% endif %}
            {% endfor %}
        }
    }
    lldp {
        interface all;
    }
}
security {
    flow {
        tcp-mss {
            ipsec-vpn {
                mss 1350;
            }
        }
    }
    screen {
        ids-option untrust-screen {
            icmp {
                ping-death;
            }
            ip {
                source-route-option;
                tear-drop;
            }
            tcp {
                syn-flood {
                    alarm-threshold 1024;
                    attack-threshold 200;
                    source-threshold 1024;
                    destination-threshold 2048;
                    queue-size 2000;
                    timeout 20;
                }
                land;
            }
        }
    }
    zones {
    {% for interface in device.interfaces %}
        {% if interface.description == "vpn" %}
        security-zone {{ interface.zone }} {
            interfaces {
                {{ interface.name }}.{{ interface.unit }} {
                    host-inbound-traffic {
                        system-services {
                            all;
                        }
                        protocols {
                            all;
                        }
                    }
                }
            }
        }
        {%- elif interface.zone is defined and interface.zone != 'loopback' %}
        security-zone {{ interface.zone }} {
            interfaces {
                {{ interface.name }}.{{ interface.unit }} {
                    host-inbound-traffic {
                        system-services {
                            all;
                        }
                        protocols {
                            all;
                        }
                    }
                }
            }
        }
        {% endif %}
    {% endfor %}
    }
}